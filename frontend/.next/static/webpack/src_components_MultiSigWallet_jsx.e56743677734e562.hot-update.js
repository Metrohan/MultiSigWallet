"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("src_components_MultiSigWallet_jsx",{

/***/ "./src/lib/contractCalls.js":
/*!**********************************!*\
  !*** ./src/lib/contractCalls.js ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   confirmTransaction: function() { return /* binding */ confirmTransaction; },\n/* harmony export */   getProposal: function() { return /* binding */ getProposal; },\n/* harmony export */   getProposals: function() { return /* binding */ getProposals; },\n/* harmony export */   getThreshold: function() { return /* binding */ getThreshold; },\n/* harmony export */   initializeContract: function() { return /* binding */ initializeContract; },\n/* harmony export */   isOwner: function() { return /* binding */ isOwner; },\n/* harmony export */   proposeTransaction: function() { return /* binding */ proposeTransaction; }\n/* harmony export */ });\n/* harmony import */ var _stacks_transactions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @stacks/transactions */ \"./node_modules/@stacks/transactions/dist/polyfill/index.js\");\n/* harmony import */ var _stacks_network__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @stacks/network */ \"./node_modules/@stacks/network/dist/esm/index.js\");\n/* harmony import */ var _stacks_connect__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @stacks/connect */ \"./node_modules/@stacks/connect/dist/index.mjs\");\n// src/lib/contractCalls.js\n\n\n\nconst contractAddress = \"ST396D69K21GVKQVKTGSVJ9J8GRF1A9N3NCFP69P7\"; // kendi adresin\nconst contractName = \"multi-sig-wallet\";\nconst network = new _stacks_network__WEBPACK_IMPORTED_MODULE_0__.StacksTestnet();\nconst proposeTransaction = async (recipient, amount)=>{\n    const integerAmount = Number(amount);\n    if (!Number.isInteger(integerAmount) || integerAmount <= 0) {\n        throw new Error(\"Amount must be a positive integer\");\n    }\n    const functionArgs = [\n        (0,_stacks_transactions__WEBPACK_IMPORTED_MODULE_1__.standardPrincipalCV)(recipient),\n        (0,_stacks_transactions__WEBPACK_IMPORTED_MODULE_1__.uintCV)(integerAmount)\n    ];\n    const options = {\n        contractAddress,\n        contractName,\n        functionName: \"propose-transaction\",\n        functionArgs,\n        network,\n        postConditionMode: _stacks_transactions__WEBPACK_IMPORTED_MODULE_1__.PostConditionMode.Allow,\n        onFinish: (data)=>console.log(\"Transaction submitted:\", data),\n        onCancel: ()=>console.log(\"Transaction canceled\")\n    };\n    await (0,_stacks_connect__WEBPACK_IMPORTED_MODULE_2__.openContractCall)(options);\n};\nconst confirmTransaction = async (proposalId)=>{\n    // Proposal ID validasyonu\n    if (!proposalId) {\n        throw new Error(\"Proposal ID is required\");\n    }\n    const parsedId = parseInt(proposalId);\n    if (isNaN(parsedId) || parsedId <= 0) {\n        throw new Error(\"Invalid proposal ID. Must be a positive number.\");\n    }\n    const functionArgs = [\n        (0,_stacks_transactions__WEBPACK_IMPORTED_MODULE_1__.uintCV)(parsedId)\n    ];\n    const options = {\n        contractAddress,\n        contractName,\n        functionName: \"confirm-transaction\",\n        functionArgs,\n        network,\n        postConditionMode: _stacks_transactions__WEBPACK_IMPORTED_MODULE_1__.PostConditionMode.Allow,\n        onFinish: (data)=>console.log(\"Transaction submitted:\", data),\n        onCancel: ()=>console.log(\"Transaction canceled\")\n    };\n    await (0,_stacks_connect__WEBPACK_IMPORTED_MODULE_2__.openContractCall)(options);\n};\n// Contract'ınızın yapısına uygun olarak güncellenmiş getProposals fonksiyonu\nconst getProposals = async (sender)=>{\n    try {\n        // Önce toplam proposal sayısını al\n        const countResult = await (0,_stacks_transactions__WEBPACK_IMPORTED_MODULE_1__.callReadOnlyFunction)({\n            contractAddress,\n            contractName,\n            functionName: \"get-proposal-count\",\n            functionArgs: [],\n            network,\n            senderAddress: sender\n        });\n        const totalCount = parseInt(countResult.value.value);\n        const proposals = [];\n        // Her proposal'ı tek tek çek (1'den başlayarak çünkü ID'ler 1'den başlıyor)\n        for(let i = 1; i <= totalCount; i++){\n            try {\n                const proposalResult = await (0,_stacks_transactions__WEBPACK_IMPORTED_MODULE_1__.callReadOnlyFunction)({\n                    contractAddress,\n                    contractName,\n                    functionName: \"get-proposal\",\n                    functionArgs: [\n                        (0,_stacks_transactions__WEBPACK_IMPORTED_MODULE_1__.uintCV)(i)\n                    ],\n                    network,\n                    senderAddress: sender\n                });\n                // Proposal varsa listeye ekle\n                if (proposalResult.value !== null && proposalResult.value.data) {\n                    const proposalData = proposalResult.value.data;\n                    proposals.push({\n                        id: i,\n                        recipient: proposalData.to.value,\n                        amount: parseInt(proposalData.amount.value) / 1000000,\n                        confirmationCount: parseInt(proposalData[\"confirmation-count\"].value),\n                        executed: proposalData.executed.value,\n                        confirmations: proposalData.confirmations.value.map((p)=>p.value)\n                    });\n                }\n            } catch (error) {\n                console.error(\"Error fetching proposal \".concat(i, \":\"), error);\n            // Belirli bir proposal alınamıyorsa devam et\n            }\n        }\n        return proposals;\n    } catch (error) {\n        console.error(\"Error fetching proposals:\", error);\n        return [];\n    }\n};\n// Tek bir proposal almak için yardımcı fonksiyon\nconst getProposal = async (proposalId, sender)=>{\n    try {\n        const result1 = await (0,_stacks_transactions__WEBPACK_IMPORTED_MODULE_1__.callReadOnlyFunction)({\n            contractAddress,\n            contractName,\n            functionName: \"get-proposal\",\n            functionArgs: [\n                (0,_stacks_transactions__WEBPACK_IMPORTED_MODULE_1__.uintCV)(parseInt(proposalId))\n            ],\n            network,\n            senderAddress: sender\n        });\n        if (result1.value && result1.value.data) {\n            const proposalData = result1.value.data;\n            return {\n                id: parseInt(proposalId),\n                recipient: proposalData.to.value,\n                amount: parseInt(proposalData.amount.value) / 1000000,\n                confirmationCount: parseInt(proposalData[\"confirmation-count\"].value),\n                executed: proposalData.executed.value,\n                confirmations: proposalData.confirmations.value.map((p)=>p.value)\n            };\n        }\n        return null;\n    } catch (error) {\n        console.error(\"Error fetching proposal:\", error);\n        return null;\n    }\n};\n// Threshold'u almak için yardımcı fonksiyon\nconst getThreshold = async (sender)=>{\n    try {\n        const result1 = await (0,_stacks_transactions__WEBPACK_IMPORTED_MODULE_1__.callReadOnlyFunction)({\n            contractAddress,\n            contractName,\n            functionName: \"get-threshold\",\n            functionArgs: [],\n            network,\n            senderAddress: sender\n        });\n        return parseInt(result1.value.value);\n    } catch (error) {\n        console.error(\"Error fetching threshold:\", error);\n        return 0;\n    }\n};\n// Contract'ı initialize etmek için\nconst initializeContract = async (owner1, owner2, owner3, threshold)=>{\n    const functionArgs = [\n        (0,_stacks_transactions__WEBPACK_IMPORTED_MODULE_1__.standardPrincipalCV)(owner1),\n        (0,_stacks_transactions__WEBPACK_IMPORTED_MODULE_1__.standardPrincipalCV)(owner2),\n        (0,_stacks_transactions__WEBPACK_IMPORTED_MODULE_1__.standardPrincipalCV)(owner3),\n        (0,_stacks_transactions__WEBPACK_IMPORTED_MODULE_1__.uintCV)(threshold)\n    ];\n    const options = {\n        contractAddress,\n        contractName,\n        functionName: \"initialize\",\n        functionArgs,\n        network,\n        postConditionMode: _stacks_transactions__WEBPACK_IMPORTED_MODULE_1__.PostConditionMode.Allow,\n        onFinish: (data)=>console.log(\"Initialize transaction submitted:\", data),\n        onCancel: ()=>console.log(\"Initialize transaction canceled\")\n    };\n    await (0,_stacks_connect__WEBPACK_IMPORTED_MODULE_2__.openContractCall)(options);\n};\n// Bir principal'in owner olup olmadığını kontrol etmek için\nconst isOwner = async (principalAddress, sender)=>{\n    try {\n        const result1 = await (0,_stacks_transactions__WEBPACK_IMPORTED_MODULE_1__.callReadOnlyFunction)({\n            contractAddress,\n            contractName,\n            functionName: \"is-owner-check\",\n            functionArgs: [\n                (0,_stacks_transactions__WEBPACK_IMPORTED_MODULE_1__.standardPrincipalCV)(principalAddress)\n            ],\n            network,\n            senderAddress: sender\n        });\n        return result1.value.value;\n    } catch (error) {\n        var _result;\n        console.error(\"Error checking owner status:\", error);\n        // Add this debugging before the return\n        console.log(\"Full result object:\", result);\n        console.log(\"result.value:\", (_result = result) === null || _result === void 0 ? void 0 : _result.value);\n        console.log(\"Result type:\", typeof result);\n        return false;\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/lib/contractCalls.js\n"));

/***/ })

});